/*
        Функция принимает два объекта с разными ключами некоторые из которых
        могут пересекаться. Необходимо вернуть первый объект с обновленными
        значениями из второго объекта(только те которые совпадают).

        Example: 
            obj1 = {
                foo: 'foo',
                bar: 'bar',
            }

            obj2 = {
                bar: 'foo',
                some: 'some'
            }

            result = {
                foo: 'foo',
                bar: 'foo'
            }

        Задача со звездочкой: второй параметр теперь не объект, а массив объектов.
        Так же необходимо обновить пересекающиеся ключи. Приоритет  = индекс элемента в массиве

*/

const margeSameKeysOfObjects = (obj1, obj2) => {

}

const margeSameKeysOfObjectsExpert = (obj1, arrayOfObjs) => {

}




/* 

        Функция принимает два параметра: 
            -массив с четырьмя значениями которые соответствуют количеству монет 
            определенного номинала
            const nominals = [.5, .25, .1, .05]
            - требуемая сума

        Функция должна вернуть true если сума монет больше или равна требуемой и 
        false если меньше.

        Example: 
            coinsCount = [0, 2, 5, 5]
            demandingSum = 1
            result = true

        Задача со звездочкой: теперь второй параметр сума сдачи которую вам необходимо
        дать. true если у вас это получится и false если нет.

*/ 

const itsEnoughForMyBeer = (coinsCount, beerCost) => {

}

const canGiveChange = (coinsCount, change) => {

}